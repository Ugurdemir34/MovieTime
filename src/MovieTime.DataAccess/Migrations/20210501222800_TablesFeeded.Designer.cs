// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieTime.DataAccess.Concrete.Contexts;

namespace MovieTime.DataAccess.Migrations
{
    [DbContext(typeof(MovieTimeContext))]
    [Migration("20210501222800_TablesFeeded")]
    partial class TablesFeeded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MovieTime.Entities.Concrete.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("MovieTime.Entities.Concrete.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06ffa08f-902b-422d-ad4f-6b657645b98c"),
                            CreationDate = new DateTime(2021, 5, 2, 1, 27, 59, 916, DateTimeKind.Local).AddTicks(4067),
                            Description = "Yabancı Filmler",
                            Name = "Yabancı"
                        },
                        new
                        {
                            Id = new Guid("327c43ed-7687-469f-ac27-5f97283dd3d0"),
                            CreationDate = new DateTime(2021, 5, 2, 1, 27, 59, 919, DateTimeKind.Local).AddTicks(2993),
                            Description = "4K Filmler",
                            Name = "4K"
                        });
                });

            modelBuilder.Entity("MovieTime.Entities.Concrete.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MovieTime.Entities.Concrete.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a05bc36-9e90-4513-b463-e85e1c6757bd"),
                            CreationDate = new DateTime(2021, 5, 2, 1, 27, 59, 922, DateTimeKind.Local).AddTicks(2820),
                            Description = "Aile Filmleri",
                            Name = "Aile"
                        },
                        new
                        {
                            Id = new Guid("3b73b3cd-944c-4f5c-a4c2-c764d17f1681"),
                            CreationDate = new DateTime(2021, 5, 2, 1, 27, 59, 922, DateTimeKind.Local).AddTicks(3431),
                            Description = "Fantastik Filmler",
                            Name = "Fantastik"
                        });
                });

            modelBuilder.Entity("MovieTime.Entities.Concrete.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Actors")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<Guid?>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Imdb")
                        .HasColumnType("float");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("GenreId");

                    b.HasIndex("TagId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieTime.Entities.Concrete.MovieCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCategories");
                });

            modelBuilder.Entity("MovieTime.Entities.Concrete.MovieGenre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GenreId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("MovieTime.Entities.Concrete.MovieTag", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieTags");
                });

            modelBuilder.Entity("MovieTime.Entities.Concrete.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef19f7e9-13d5-4171-ba03-edd1ed3cc5be"),
                            CreationDate = new DateTime(2021, 5, 2, 1, 27, 59, 923, DateTimeKind.Local).AddTicks(2961),
                            Description = "HarryPotter Tagi",
                            Name = "Harry Potter Serisi"
                        },
                        new
                        {
                            Id = new Guid("b419f1b3-2935-4828-82b5-c63eeff081c6"),
                            CreationDate = new DateTime(2021, 5, 2, 1, 27, 59, 923, DateTimeKind.Local).AddTicks(3545),
                            Description = "HarryPotter Tagi2",
                            Name = "Harry Potter Filmleri İzle"
                        });
                });

            modelBuilder.Entity("MovieTime.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("MovieTime.Entities.Concrete.Movie", null)
                        .WithMany("Comments")
                        .HasForeignKey("MovieId");
                });

            modelBuilder.Entity("MovieTime.Entities.Concrete.Movie", b =>
                {
                    b.HasOne("MovieTime.Entities.Concrete.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("MovieTime.Entities.Concrete.Genre", null)
                        .WithMany("Movies")
                        .HasForeignKey("GenreId");

                    b.HasOne("MovieTime.Entities.Concrete.Tag", null)
                        .WithMany("Movies")
                        .HasForeignKey("TagId");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("MovieTime.Entities.Concrete.MovieCategory", b =>
                {
                    b.HasOne("MovieTime.Entities.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieTime.Entities.Concrete.Movie", "Movie")
                        .WithMany("MovieCategories")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieTime.Entities.Concrete.MovieGenre", b =>
                {
                    b.HasOne("MovieTime.Entities.Concrete.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieTime.Entities.Concrete.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieTime.Entities.Concrete.MovieTag", b =>
                {
                    b.HasOne("MovieTime.Entities.Concrete.Movie", "Movie")
                        .WithMany("MovieTags")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieTime.Entities.Concrete.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MovieTime.Entities.Concrete.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("MovieTime.Entities.Concrete.Movie", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("MovieCategories");

                    b.Navigation("MovieGenres");

                    b.Navigation("MovieTags");
                });

            modelBuilder.Entity("MovieTime.Entities.Concrete.Tag", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
